#lang sicp

; Exercise 1.15
; The sine of an angle (specified in radians) can be computed by making use of
; the approximation sin(x) ≈ x if x is sufficiently small, and the trigonometric
; identity
;
; sin(x) = 3 sin(x/3) - 4 sin³(x/3)
;
; to reduce the size of the argument of sin. (For purposes of this exercise an
; angle is considered "sufficiently small" if its magnitude is not greater than
; 0.1 radians.) These ideas are incorporated in the following procedures:

(define (cube x) (* x x x))

(define (p x) (- (* 3 x) (* 4 (cube x))))

(define (sine angle)
  (if (not (> (abs angle) 0.1))
    angle
    (p (sine (/ angle 3.0)))))

; a.) How many times is the procedure p applied when (sine 12.15) is evaluated?
;
; b.) What is the order of growth in space and number of steps (as a function of
;     a) used by the process generated by the sine procedure when (sine a) is
;     evaluated?

; (sine 12.15)
; (p (sine 4.05))
; (p (p (sine 1.35)))
; (p (p (p (sine 0.45))))
; (p (p (p (p (sine 0.15)))))
; (p (p (p (p (p (sine 0.05))))))
;
; a.) p is applied 5 times when evaluateing (sine 12.15).
;
; b.) The sine procedure repeatedly reduces the angle by a factor of 3, which is 
;     described by the function log₃(a). This is sufficient to say the growth in
;     complexity is O(log₃(a)), or simply O(log(a)). The threshold (absolute) 
;     angle is 0.1 however, not 1, so the input is scaled by a factor of 10 to
;     arrive at a more precise growth in complexity of O(log₃(10 * a)). This
;     describes the maximum number of nodes (complexity), but it also describes
;     the maximum depth of the tree (space), since p does not branch (is not
;     exponential). This means that the growth in space is likewise
;     O(log₃(10 * a)).
